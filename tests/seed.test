<?php

/**
 * @file
 * Provides test classes for seed module.
 */

class SeedTestCase extends DrupalWebTestCase {

  /**
   * Returns a seed row as an object directly from the database.
   *
   * @param $sid
   *   A Seed ID.
   * @return
   *   A Seed Object.
   */
  function getSeed($sid) {
    return db_select('seed', 's')
      ->fields('s')
      ->condition('s.sid', $sid)
      ->range(0, 1)
      ->execute()
      ->fetchObject();
  }

  /**
   * Create replantable seeds.
   *
   * @param $num_seeds
   *   Number of seeds to generate. Defaults to 10.
   * @param $offset
   *   Offset the seeds. Defaults to 0.
   * @param $time_apart
   *   Time between seeds. Defaults to 20.
   * @param $tid
   *   A Term ID. Defaults to NULL.
   */
  function createSeedReplantable($num_seeds = 10, $offset = 0, $time_apart = 20, $tid = NULL) {
    // Create seeds a set amount appart.
    for ( $i = 0; $i < $num_seeds; $i++ ) {
      $data = (object) array(
        'tid' => $tid,
        'name' => 'seedtest' . '_' . ( $i + 1 ),
        'seed_timestamp' => ( $i * $time_apart ) + $offset,
        'seed_timestamp_end' => 0,
        'hold_life' => 10,
        'replant' => TRUE,
        'status' => TRUE,
      );
      $seed = new Seed($data);
      $seed->save();
    }
  }

  /**
   * Create replantable seeds with limit.
   *
   * @param $num_seeds
   *   Number of seeds to generate. Defaults to 10.
   * @param $offset
   *   Offset the seeds. Defaults to 0.
   * @param $time_apart
   *   Time between seeds. Defaults to 20.
   * @param $tid
   *   A Term ID. Defaults to NULL.
   */
  function createSeedReplantableWithLimit($num_seeds = 10, $offset = 0, $time_apart = 20, $tid = NULL) {
    // Create seeds a set amount appart.
    for ( $i = 0; $i < $num_seeds; $i++ ) {
      $data = (object) array(
        'tid' => $tid,
        'name' => 'seedtest' . '_' . ( $i + 1 ),
        'seed_timestamp' => ( $i * $time_apart ) + $offset,
        'seed_timestamp_end' => ( $i * $time_apart ) + $offset + 10,
        'hold_life' => 10,
        'replant' => TRUE,
        'status' => TRUE,
      );
      $seed = new Seed($data);
      $seed->save();
    }
  }

  /**
   * Create non-replantable seeds.
   *
   * @param $num_seeds
   *   Number of seeds to generate. Defaults to 10.
   * @param $offset
   *   Offset the seeds. Defaults to 0.
   * @param $time_apart
   *   Time between seeds. Defaults to 20.
   * @param $tid
   *   A Term ID. Defaults to NULL.
   */
  function createSeedNonReplantable($num_seeds = 10, $offset = 0, $time_apart = 20, $tid = NULL) {
    // Create seeds a set amount appart.
    for ( $i = 0; $i < $num_seeds; $i++ ) {
      $data = (object) array(
        'tid' => $tid,
        'name' => 'seedtest' . '_' . ( $i + 1 ),
        'seed_timestamp' => ( $i * $time_apart ) + $offset,
        'seed_timestamp_end' => ( $i * $time_apart ) + $offset + 10,
        'hold_life' => 10,
        'replant' => FALSE,
        'status' => TRUE,
      );
      $seed = new Seed($data);
      $seed->save();
    }
  }
}

class SeedAPITestCase extends SeedTestCase {
  protected $privileged_user;
  protected $authenticated_user;
  protected $authenticated_user2;

  public static function getInfo() {
    return array(
      'name' => 'Seed',
      'description' => 'Tests the core API for proper inserts and updates to the database tables',
      'group' => 'Seed',
    );
  }

  public function setUp() {
    parent::setUp('seed');
    // Create users.
    $this->privileged_user = $this->drupalCreateUser(array('administer seeds'));
    $this->authenticated_user = $this->drupalCreateUser(array('use seeds'));
    $this->authenticated_user2 = $this->drupalCreateUser(array('use seeds'));
  }

  /**
   * Call saving and loading.
   */
  function testSeedStorage() {
    $this->drupalLogin($this->authenticated_user);

    // Save and load a seed object, and ensure it matches what's stored in the database.
    $data = (object) array(
      'seed_timestamp' => time(),
      'name' => 'test1',
      'status' => 1,
    );
    $seed = new Seed($data);
    $seed->save();

    $seed1 = SeedAPI::load($seed->sid);

    // Ensure seed object matches that which was saved and loaded using seed_save() and seed_load().
    $this->assertTrue($seed1->getData() == $this->getSeed($seed->sid), t('Seed successfully stored in database.'));
  }

  /**
   * Test find with replantable seeds.
   */
  function testSeedFindReplantable() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedReplantable(10, 0, 20, NULL);

    // Look for the first seed (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First seed was found.'));

    // Look for the first seed again (held).
    $seed_2 = SeedAPI::find(array('time' => 6, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->sid == $seed_1->sid, t('First held seed was found.'));

    // Look for the first seed (existing, replanted).
    $seed_3 = SeedAPI::find(array('time' => 16, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_3 !== FALSE && $seed_3->sid == $seed_1->sid, t('First seed was replanted and found again.'));
  }

  /**
   * Test find with replantable seeds with multiple users.
   */
  function testSeedFindReplantableMultiUser() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedReplantable(10, 0, 20, NULL);

    // First user looks for the first seed (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First user first seed was found.'));

    // First user looks for the first seed (held).
    $seed_2 = SeedAPI::find(array('time' => 6, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->sid == $seed_1->sid, t('First user held seed was found.'));

    // Second user looks for the first seed (held).
    $seed_3 = SeedAPI::find(array('time' => 7, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_3 === FALSE, t('Second user first held seed was not found.'));

    // Second user looks for the first seed replanted (exisiting).
    $seed_4 = SeedAPI::find(array('time' => 16, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_4 !== FALSE && $seed_4->sid == $seed_1->sid, t('Second user found first replanted seed.'));
  }

  /**
   * Test find with replantable seeds.
   */
  function testSeedFindReplantableMultiUserWithTerm() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedReplantable(10, 0, 20, 1);
    $this->createSeedReplantable(10, 0, 20, 2);

    // First user looks for the first seed with first term (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'tid' => 1, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First seed with first term was found.'));

    // First user looks for the first seed again (held).
    $seed_2 = SeedAPI::find(array('time' => 6, 'tid' => 1,'account' => $this->authenticated_user));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->sid == $seed_1->sid, t('First held seed with first term was found.'));

    // Second user looks the the first seed with first term (held by first user).
    $seed_3 = SeedAPI::find(array('time' => 7, 'tid' => 1, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_3 === FALSE, t('Second user did not find first term seed.'));

    // Second user looks for the first seed with second term (existing).
    $seed_4 = SeedAPI::find(array('time' => 8, 'tid' => 2, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_4 !== FALSE && $seed_4->sid != $seed_1->sid, t('Second user found second term seed and it was not the first seed.'));
  }

  /**
   * Test find with replantable seeds with limits.
   */
  function testSeedFindReplantableWithLimit() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedReplantableWithLimit(10, 0, 20, NULL);

    // Look for the first seed (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First seed was found.'));

    // Look for the first seed again (existing).
    $seed_2 = SeedAPI::find(array('time' => 6, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->sid == $seed_1->sid, t('First seed was found again.'));

    // Look for the second seed (non-existing, too early).
    $seed_3 = SeedAPI::find(array('time' => 16, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_3 === FALSE, t('First seed was not found again.'));
  }

  /**
   * Test find with non replantable seeds with limits.
   */
  function testSeedFindNonReplantable() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedNonReplantable(10, 0, 20, NULL);

    // Look for the first seed (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First seed was found.'));

    // Look for the first seed again (held).
    $seed_2 = SeedAPI::find(array('time' => 6, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->sid == $seed_1->sid, t('First seed was found again.'));

    // Look for the second seed (non-existing, too early).
    $seed_3 = SeedAPI::find(array('time' => 16, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_3 === FALSE, t('Second seed was not found.'));

    // Look for the second seed (existing).
    $seed_4 = SeedAPI::find(array('time' => 25, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_4 !== FALSE, t('Second seed was found.'));
    $this->assertTrue($seed_4 !== FALSE && $seed_4->sid !== $seed_1->sid, t('Second seed was found is different from first seed.'));
  }

  /**
   * Test find with non replantable seeds with limits.
   */
  function testSeedFindNonReplantableMultiUser() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedNonReplantable(10, 0, 20, NULL);

    // First user looks for the first seed (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First user first seed was found.'));

    // First user looks for the first seed again (held).
    $seed_2 = SeedAPI::find(array('time' => 6, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->sid == $seed_1->sid, t('First user held seed was found.'));

    // Second user looks for the first seed (held).
    $seed_3 = SeedAPI::find(array('time' => 7, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_3 === FALSE, t('Second user first held seed was not found.'));

    // First user looks for expired seed (expired).
    $seed_4 = SeedAPI::find(array('time' => 16, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_4 === FALSE, t('First user first expired seed was not found.'));

    // Second user looks for a new seed (exisiting).
    $seed_5 = SeedAPI::find(array('time' => 25, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_5 !== FALSE, t('Second user second seed was found.'));
    $this->assertTrue($seed_5 !== FALSE && $seed_5->sid !== $seed_1->sid, t('Second user second seed was found is different from first seed.'));
  }

  /**
   * Test consume with replantable seeds.
   */
  function testSeedConsumeReplantable() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedReplantable(10, 0, 20, NULL);

    // First user looks for the first seed (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First user first seed was found.'));

    // First user uses the first seed (held).
    // @todo refactor this to new method.
    $seed_1->consume();
    $seed_2 = $seed_1;
    $this->assertTrue($seed_2 !== FALSE && $seed_2->sid == $seed_1->sid, t('First user used first seed.'));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->used == TRUE, t('First user used first seed was marked as used.'));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->used_timestamp !== 0, t('First user used first seed was set a used timestamp.'));
    $this->assertTrue($seed_2 !== FALSE && $seed_2->used_token, t('First user used first seed token generated (!token).', array('!token' => $seed_2->used_token)));
  }

  /**
   * Test drop with replantable seeds.
   */
  function testSeedDropReplantable() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedReplantable(10, 0, 20, NULL);

    // First user looks for the first seed (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First user first seed was found.'));

    // Second user looks for the first seed (held).
    $seed_2 = SeedAPI::find(array('time' => 6, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_2 === FALSE, t('Second user first held seed was not found.'));

    // First user drops first seed (drop).
    // @todo refactor this to new method.
    $seed_1->drop();
    $seed_3 = $seed_1;
    $this->assertTrue($seed_3 !== FALSE && $seed_3->sid == $seed_1->sid, t('First user drops first seed.'));
    $this->assertTrue($seed_3 !== FALSE && $seed_3->uid == 0, t('Dropped seed is not assigned to a user.'));
    $this->assertTrue($seed_3 !== FALSE && $seed_3->hold_timestamp == 0, t('Dropped seed has no hold timestamp.'));
    $this->assertTrue($seed_3 !== FALSE && $seed_3->status == TRUE, t('Dropped seed is replanted and can be found.'));
    $this->assertTrue($seed_3 !== FALSE && $seed_3->used == FALSE, t('Dropped seed is marked as not being used.'));

    // Second user can pickup first replanted seed (existing).
    $seed_4 = SeedAPI::find(array('time' => 7, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_4 !== FALSE && $seed_4->sid == $seed_1->sid, t('Second user finds first replanted seed.'));
  }

  /**
   * Test drop with non replantable seeds.
   */
  function testSeedDropNonReplantable() {
    $this->drupalLogin($this->authenticated_user);
    $this->createSeedNonReplantable(10, 0, 20, NULL);

    // First user looks for the first seed (existing).
    $seed_1 = SeedAPI::find(array('time' => 5, 'account' => $this->authenticated_user));
    $this->assertTrue($seed_1 !== FALSE, t('First user first seed was found.'));

    // Second user looks for the first seed (held).
    $seed_2 = SeedAPI::find(array('time' => 6, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_2 === FALSE, t('Second user first held seed was not found.'));

    // First user drops first seed (drop).
    // @todo refactor this to new method.
    $seed_1->drop();
    $seed_3 = $seed_1;
    $this->assertTrue($seed_3 !== FALSE && $seed_3->sid == $seed_1->sid, t('First user drops first seed.'));
    $this->assertTrue($seed_3 !== FALSE && $seed_3->uid == 0, t('Dropped seed is not assigned to a user.'));
    $this->assertTrue($seed_3 !== FALSE && $seed_3->status == FALSE, t('Dropped seed is cannot be found again.'));
    $this->assertTrue($seed_3 !== FALSE && $seed_3->used == FALSE, t('Dropped seed is marked as not being used.'));

    // Second user can not pickup first dropped seed (non-existing).
    $seed_4 = SeedAPI::find(array('time' => 7, 'account' => $this->authenticated_user2));
    $this->assertTrue($seed_4 === FALSE, t('Second user does not find first dropped seed.'));
  }
}
