<?php

/**
 * @file
 * Provides test classes for seed module.
 */


/**
 * Seed base test class with various helper functions.
 */
class SeedTestCase extends DrupalWebTestCase {

}

/**
 * API Tests.
 */
class SeedAPITestCase extends SeedTestCase {
  private $privileged_user;
  private $authenticated_user;

  /**
   * Implements getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Seed API'),
      'description' => t('Tests the core API for proper inserts and updates to the database tables'),
      'group' => t('Seed'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp('seed');

    $this->privileged_user = $this->drupalCreateUser(array('administer seeds'));
    $this->authenticated_user = $this->drupalCreateUser(array('use seeds'));
    $this->authenticated_user2 = $this->drupalCreateUser(array('use seeds'));
    $this->drupalLogin($this->authenticated_user);
  }

  /**
   * Returns a seed row as an object directly from the database.
   *
   * @param $sid
   *   A Seed ID.
   * @return
   *   A Seed Object.
   */
  function getSeed($sid) {
    return db_select('seed', 's')
      ->fields('s')
      ->condition('s.sid', $sid)
      ->range(0, 1)
      ->execute()
      ->fetchObject();
  }

  /**
   * Call seed_save() and seed_load().
   */
  function testSeedStorage() {
    // Save and load a seed object, and ensure it matches what's stored in the database.
    $seed = (object) array(
      'seed_timestamp' => time(),
      'name' => 'test1',
      'status' => 1,
    );

    seed_save($seed);
    $seed = seed_load($seed->sid);

    // Ensure seed object matches that which was saved and loaded using seed_save() and seed_load().
    $this->assertTrue($seed == $this->getSeed($seed->sid), t('Seed successfully stored in database.'));
  }

  /**
   * Call seed_find().
   */
  function testSeedFind() {
    seed_generate(10, 5);

    // Generated seeds should not be available yet.
    $seed = seed_find();
    $this->assertFalse($seed, t('Generated seeds are not initially available.'));

    sleep(6); // Wait 6 seconds for a seed.

    // Find first seed for logged in user.
    $first_seed_user1 = seed_find();
    $this->assertTrue($first_seed_user1, t('First user successfully found and held seed.'));

    sleep(6); // Wait 6 seconds for next seed.

    // Find second seed for second user and ensure it's not equal to the logged in users seed.
    $first_seed_user2 = seed_find(NULL, TRUE, $this->authenticated_user2);
    $this->assertTrue($first_seed_user2, t('Second user sucessfully found and held a seed.'));
    $this->assertTrue($first_seed_user1 != $first_seed_user2, t("Users are not holding the same seeds."));

    sleep(6); // Wait 6 seconds for next seed.

    // First user should received the same held seed they've initial found.
    $second_seed_user1 = seed_find();
    // The hold timestamp will be different, unset this when comparing the seeds.
    unset($first_seed_user1->hold_timestamp, $second_seed_user1->hold_timestamp);
    $this->assertTrue($first_seed_user1 == $second_seed_user1, t('First user finding a new seed will always find the held seed.'));
  }

  /**
   * Call seed_use().
   */
  function testSeedUse() {
    seed_generate(10, 5);

    sleep(6); // Wait 6 seconds for seed to be available.

    // Find a seed, use it and check properties.
    $seed = seed_find();
    $used_seed = seed_use($seed->sid);
    $this->assertTrue($used_seed->used == TRUE, t('Seed has been marked off as used.'));
    $this->assertTrue($used_seed->used_timestamp != 0, t("Seed's timestamp must not be zero."));

    // Ensure database values match.
    $db_seed = $this->getSeed($used_seed->sid);
    $this->assertTrue($db_seed->used == TRUE, t('DB value for seed indicates that it was used.'));
    $this->assertTrue($db_seed->used_timestamp != 0, t("DB value for seed's used_timestamp was set to a non-zero value."));
    $this->assertTrue($db_seed->used_timestamp == $used_seed->used_timestamp, t("DB value for the seed's used_timestamp matches the Used seed's used_timestamp."));
  }

  /**
   * Call seed_drop()
   */
  function testSeedDrop() {
    seed_generate(10, 5);

    sleep(6); // Wait 6 seconds for seed to be available.

    // Find a seed, drop it and check properties.
    $seed = seed_find();
    $dropped_seed = seed_drop($seed->sid);
    $this->assertTrue($dropped_seed->status == 1, t("Seed's status set to 1."));
    $this->assertTrue($dropped_seed->hold_timestamp == 0, t("Seed's hold timestamp was reset to zero."));
    $this->assertTrue($dropped_seed->uid == 0, t("Seed's uid was reset to zero."));

    // Ensure new values were successfully stored in the database.
    $db_seed = $this->getSeed($dropped_seed->sid);
    $this->assertTrue($db_seed->status == 1, t("DB value for seed's status was set to 1."));
    $this->assertTrue($db_seed->hold_timestamp == 0, t("DB value for seed's hold_timestamp was reset to zero."));
    $this->assertTrue($db_seed->uid == 0, t("DB value for seed's uid was reset to zero."));
  }
}
